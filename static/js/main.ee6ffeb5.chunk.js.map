{"version":3,"sources":["logo.svg","redux/jokes/jokesReducer.js","redux/store.js","redux/jokes/jokesActionType.js","components/Home.js","components/Winner.js","components/JokePage.js","redux/middleware/jokesMiddleware.js","redux/jokes/jokesAction.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","initialState","joke","error","isLoading","store","createStore","state","action","type","payload","applyMiddleware","thunk","Home","props","setButtonState","setState","buttonPressed","className","to","pathname","id","Component","connect","Winner","style","textAlign","JokePage","getJokes","fetchJokes","counter","console","log","this","content","onClick","dispatch","Axios","get","headers","then","response","data","catch","setError","App","component","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ee6ffeb5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import {SET_JOKE, SET_ERROR, SET_LOADING_STATE} from './jokesActionType';\r\n\r\nconst initialState = {\r\n    joke : '',\r\n    error : '',\r\n    isLoading : false\r\n}\r\nconst jokeReducer = (state = initialState,action) => {\r\n\r\n        switch (action.type) {\r\n            case SET_JOKE: {\r\n                return {\r\n                    ...state,\r\n                    joke : action.payload\r\n                }\r\n            }\r\n\r\n            case SET_ERROR: {\r\n                return{\r\n                    ...state,\r\n                    error : action.payload\r\n                }\r\n            }\r\n\r\n            case SET_LOADING_STATE: {\r\n                return{\r\n                    ...state,\r\n                    isLoading : action.payload\r\n                }\r\n            }\r\n            default: return state\r\n        }\r\n\r\n\r\n}\r\n\r\nexport {jokeReducer};","\r\nimport {jokeReducer} from './jokes/jokesReducer';\r\nimport {createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nconst store = createStore(jokeReducer,applyMiddleware(thunk));\r\n\r\nexport default store;","const SET_JOKE = 'SET_JOKE';\r\nconst SET_ERROR = 'SET_ERROR';\r\nconst SET_LOADING_STATE = 'SET_LOADING_STATE'\r\n\r\nexport {SET_JOKE,SET_ERROR,SET_LOADING_STATE};","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport './home.css';\r\nclass Home extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            buttonPressed : false\r\n        }\r\n    }\r\n\r\n    setButtonState = () => {\r\n        this.setState({\r\n            buttonPressed : true\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <div className='container'>\r\n                <h1 className = 'heading'>LET'S TRY TO MAKE YOU LAUGH!!</h1>\r\n                <Link to = {{\r\n                    pathname : '/jokepage',\r\n                }}>\r\n                <button className = 'button' type ='submit' id='ok'> Try Me! </button>\r\n                </Link>\r\n            </div>\r\n         );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return{\r\n        joke : state.joke\r\n    }\r\n}\r\nexport default connect(mapStateToProps)(Home);","import React, { Component } from 'react';\r\n\r\nclass Winner extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {  }\r\n\r\n    }\r\n    render() {\r\n        return (\r\n            <div style = {{textAlign :'center'}}>\r\n<h2>Congratulations!, U proved that you are a real Stone-Face!</h2>\r\n<h5>Nothing can make u LAUGH!</h5>\r\n<h6>Atleast SMILE!</h6>\r\n            </div>\r\n         );\r\n    }\r\n}\r\n\r\nexport default Winner;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { fetchJokes } from '../redux/middleware/jokesMiddleware';\r\nimport { Link, Redirect } from 'react-router-dom';\r\nimport './JokePage.css'\r\nclass JokePage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            counter : 0\r\n         }\r\n    }\r\n    componentDidMount () {\r\n        console.log(this.props.joke);\r\n                this.props.fetchJokes();\r\n    }\r\n    getJokes = () => {\r\n        this.props.fetchJokes();\r\n        this.setState({\r\n            counter : this.state.counter + 1\r\n        })\r\n    }\r\n     render() {\r\n         console.log(this.props.joke.content);\r\n        return (\r\n            <div className = 'jokeContainer' >\r\n                <h1 className = 'jokeBox'>{this.props.joke.content}</h1>\r\n                <h5> I know u din laugh!</h5>\r\n                <button type='submit' onClick = {this.getJokes}> Try another </button>\r\n                {\r\n                    this.state.counter === 6 &&\r\n                    <Redirect to= '/winner' />\r\n                }\r\n            </div>\r\n          );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return{\r\n        joke : state.joke\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return{\r\n        fetchJokes : () => { dispatch(fetchJokes())}\r\n     }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(JokePage);\r\n","import Axios from \"axios\";\r\nimport { setJoke,setError,setLoadingState } from \"../jokes/jokesAction\";\r\n\r\nconst fetchJokes = () => {\r\n    return function(dispatch) {\r\n        dispatch(setLoadingState(true));\r\n        Axios.get('https://joke3.p.rapidapi.com/v1/joke',{headers : {\"x-rapidapi-host\": \"joke3.p.rapidapi.com\",\r\n        \"x-rapidapi-key\": \"054137e731msh942fe9cd84a45a9p134171jsnea4afac19b51\"}})\r\n        .then (\r\n            (response) => {\r\n                console.log('response', response.data)\r\n                dispatch(setJoke(response.data));\r\n            }\r\n        )\r\n        .catch (\r\n            (error) => {\r\n                dispatch(setError(error));\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport {fetchJokes};","import { SET_ERROR, SET_JOKE, SET_LOADING_STATE } from \"./jokesActionType\";\r\n\r\nconst setJoke = (joke) => {\r\n    return {\r\n        type : SET_JOKE,\r\n        payload : joke\r\n    }\r\n}\r\n\r\nconst setLoadingState = (state) => {\r\n    return{\r\n        type : SET_LOADING_STATE,\r\n        payload : state\r\n    }\r\n}\r\n\r\nconst setError = (error) => {\r\n    return {\r\n        type : SET_ERROR,\r\n        payload :error\r\n    }\r\n}\r\nexport {setJoke,setError,setLoadingState} ;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport Home from './components/Home';\nimport Winner from './components/Winner'\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport JokePage from './components/JokePage';\n\nfunction App() {\n  return (\n    <Provider store={store}>\n    <Router>\n      <Switch>\n        <Route component = {Home} exact path='/' />\n        <Route component = {JokePage} path ='/jokepage' />\n        <Route component ={Winner} path='/winner' />\n      </Switch>\n    </Router>\n\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}